using CsvHelper;
using CsvHelper.Configuration;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.TorchSharp;
using System.Globalization;
using System.Text;
using static Microsoft.ML.DataOperationsCatalog;

public class Program
{
    private static void Main(string[] args)
    {
        
        var mlContext = new MLContext();
        mlContext.GpuDeviceId = 0;
        mlContext.FallbackToCpu = false;
        if (!File.Exists(args[0]))
        {
            Console.WriteLine("File does not exist!");
            return;
        }
        var data = LoadFile(args[0]);

        var dataset = data.Where(x => x.Classification == "benign");
        var datasetCount = dataset.Count();
        var maliciousRecordsNeeded = datasetCount * (3/7);

        dataset = dataset.Concat(
            data.Except(dataset)
            .Take(maliciousRecordsNeeded));

        Console.WriteLine($"{dataset.Count()} records loaded");

        IDataView dataView = mlContext.Data.LoadFromEnumerable(dataset);
        TrainTestData trainValidationData = mlContext.Data.TrainTestSplit(dataView, testFraction: 0.2);

        var pipeline =
        mlContext.Transforms.Conversion.MapValueToKey("Label", "Classification")
            .Append(mlContext.MulticlassClassification.Trainers.TextClassification(sentence1ColumnName: "Hash"))
            .Append(mlContext.Transforms.Conversion.MapKeyToValue("PredictedLabel"));

        var model = pipeline.Fit(trainValidationData.TrainSet);
        mlContext.Model.Save(model, dataView.Schema, "model.zip");

        IDataView testDataPredictions = model.Transform(trainValidationData.TestSet);
        RegressionMetrics trainedModelMetrics = mlContext.Regression.Evaluate(testDataPredictions);
        double rSquared = trainedModelMetrics.RSquared;
    }

    public static IEnumerable<ModelInput> LoadFile(string filePath)
    {
        using (var reader = new StreamReader(filePath))
        {
            using (var cr = new CsvReader(reader, new CsvConfiguration(CultureInfo.InvariantCulture) { Delimiter = ",", Encoding = Encoding.UTF8 }))
            {
                while (cr.Read())
                {
                    var record = cr.GetRecord<Log>();
                    yield return new ModelInput(record.Hash, record.label);
                }
            }
            
        }
    }
}

public record ModelInput (string Hash, string Classification);

public class Log
{

    public string Hash {get; set;}
    public string label	{get;set;}
    public string detailed_label {get;set;}
    public string ts	{get;set;}
    public string uid	{get;set;}
    public string id_orig_h	{get;set;}
    public string id_orig_p	{get;set;}
    public string id_resp_h	{get;set;}
    public string id_resp_p	{get;set;}
    public string proto	{get;set;}
    public string service {get; set;}
    public string duration	{get;set;}
    public string orig_bytes{get;set;}
    public string resp_bytes{get;set;}
    public string conn_state{get;set;}
    public string local_orig{get;set;}
    public string local_resp{get;set;}
    public string missed_bytes{get;set;}
    public string history {get;set;}
    public string orig_pkts {get;set;}
    public string orig_ip_bytes{get;set;}
    public string resp_pkts{get;set;}
    public string resp_ip_bytes{get;set;}

}
